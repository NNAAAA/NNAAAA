Khởi tạo Express:
	mkdir <foldername>
	cd <foldername>
	npm init
	npm i express --save
	npm i --save-dev nodemon (package.json them vao script "start":"nodemon <mainFile>")

	const express = require('express')
	const app = express()
	const port = 3000

	app.get('/', (req, res) => {
  		res.send('Hello World!')
	})

	app.listen(port, () => {
  		console.log(`Example app listening at http://localhost:${port}`)
	})
	
	const express = require('express')
	const routeName = express.Router()


Luu y:
	req.params.slug => /user/:slud
	req.query.name => /user?name=Anh
	res.redirect('back') => tro lai trang hien tai
	

Form submit :
	const deleteForm=document.forms['nameOfForm'] => lay deleteform
	deleteForm.action='path'+'?_method=DELETE'   => tao action cho deleteform
	deleteForm.submit()      => submit form

Cài Pug:
	npm i pug --save
	app.set('view engine', 'pug')
	app.set('views','./foldername')
	cài extension của vs code
Cài bodyParse 
	npm i body-parser --save
	const bodyParser = require('body-parser')
	app.use(bodyParser.urlencoded({ extended: false }))
	req.body

	Khong can cai bodyParse:
	app.use(express.urlencoded({ extended: true }))
	app.use(express.json())
Cài lowdb
	npm i lowdb --save
	const low=require('lowdb')
	const FileSync=require('lowdb/adapters/FileSync')
	const adapter=new FileSync('db.json')
	const db=low(adapter)
	db.defaults({ users:[] }).write()
	Cac method:
		.get("object.prop",defaultValue)  :lay ra doi tuong
		.set("object.prop",setValue)	  :them du lieu
		.find({prop:value})		  :tim kiem doi tuong
		.value()			  :tra ve gia tri cua target
		.write()			  :viet vao DB
Static file : cac file ben trong co the truy cap /<nameFileIn>
	app.use(express.static("<tenfile>"));

Signed Cookie:
	luu cookie : res.cookie('field-name',field-value,{signed:true})
	doc cookie : 
		npm i cookie-parser --save
		cookieParser=require('cookie-parser')
		app.use(cookieParser('string'))
		req.signedCookies
Bcrypt password:
	npm i bcrypt --save
	const bcrypt = require('bcrypt');
	const saltRounds = 10;
	const myPlaintextPassword = 's0/\/\P4$$w0rD';	

	hash :
		bcrypt.hash(req.body.password, saltRounds).then(function(hash) {
    			// Store hash in your password DB.
		});
	compare:
		bcrypt.compare(req.body.password, hash).then(function(result) {
    			// result == true
		});

File upload:
	( setup static file before )
	npm i multer --save
	const multer=require('multer')
	const upload=multer({dest: "<path>"})
	app.post('....',upload.single("<idOfForm>"),middleware...)
	app.post('....',upload.array("<idOfForm>",length),middleware...)
	req.file 
	img(src=req.file.path)

Mongoose:
	npm i mongoose
	
	
	tao 1 file rieng :
	const mongoose=require('mongoose')
	async function connect(){
  		try{
    			await mongoose.connect('mongodb://localhost:27017/<DBName>', {
      				useNewUrlParser: true,
      				useUnifiedTopology: true,
      				useFindAndModify: false,
      				useCreateIndex: true
    			});
  		}
  		catch (err){

	  	}
	}
	module.exports = { connect }
	import vao file can su dung : const db=require('path') => db.connect()

	tao file models
	const mongoose=required('mongoose')
	const Schema = mongoose.Schema;
	const Comment = new Schema({
  		name: { type: String, default: 'hahaha' },
  		age: { type: Number, min: 18, index: true },
  		bio: { type: String, match: /[a-z]/ },
  		date: { type: Date, default: Date.now },	
		buff: Buffer
	},{timestamp:true});
	module.exports=mongoose.model('Comment',Comment)

	su dung:
		const Comment=require('path')
		Course.find({},function(err,data){
			if (!err){
				res.json(data)
			}
			else {
			}
		})
	4 method:
		PUT : 	Comment.updateOne({ doi tuong can update },req.body)
				.then(()=>res.redirect('path')
				.catch(next)
		EDIT :  Comment.findById(req.params.id)
				.then(data=>res.render('path',{	data })
		CREATE: const course=new Course(req.body)
    			course.save()
		DELETE: Comment.deleteOne({ _id:req.paramas.id })
				.then(()=>res.redirect('back')
				.catch(next)
Mongoose slug generator :
	npm install mongoose-slug-generator --save
	var slug = require('mongoose-slug-generator')
	var mongoose = require('mongoose')
	mongoose.plugin(slug)
	const Schema = mongoose.Schema;
	const Comment = new Schema({
  		name: { type: String, default: 'hahaha' },
  		age: { type: Number, min: 18, index: true },
  		bio: { type: String, match: /[a-z]/ },
  		date: { type: Date, default: Date.now },	
		buff: Buffer,
		slug: { type: String, slug: ["title", "subtitle"], unique: true }
	});

override:
	npm i method-override --save
	const methodOverride=require('method-override') 
	app.use(methodOverride('_method')
	su dung:
		 form(action=/user/update?_method=PUT',method="POST")

checkbox : 9:06   f8	nodejs
pagination: 14:21 easyfrontend  reacthook



		     